<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Estacion" Id="{df0570d8-ffbb-4d88-bb38-12d681ec79be}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Estacion
VAR_INPUT
    EstadoPausa: BOOL;
    EstadoReinicia: BOOL;
    CiclosSolicitados: UINT := 0; //UnidadesSolicitadas
    
    Tcheck: TIME := T#1S;
    Treset: TIME := T#1S;
    Tdesplazador: TIME := T#1S;
	Tcinta: TIME := T#0.5S;
END_VAR
VAR_OUTPUT
    CondicionInicial: BOOL := TRUE;
    CiclosPendientes: UINT; //UnidadesPendientes
    CiclosAceptados: UINT; //UnidadesRealizadas
    PaleCodigo: BYTE;
	pieza_ok: BOOL;
    
    // Entradas comunes
	Base_en_alimentador AT %I*: BOOL;
    Pulsador_parada_emergencia AT %I*: BOOL; //PulsadorEmergencia
    Selector_modo_manual AT %I*: BOOL; //SelectorManual
    Pulsador_marcha AT %I*: BOOL; //PulsadorMarcha
    Pulsador_parada_NC AT %I*: BOOL := TRUE; //PulsadorParada
    EstacionConectada AT %I*: BOOL := TRUE;
    Detector_presion AT %I*: BOOL := TRUE; //detectorPresion

    Presencia_pale AT %I*: BOOL; //PalePresencia
    Codigo_pale_bit_0 AT %I*: BOOL;
    Codigo_pale_bit_1 AT %I*: BOOL;
    Codigo_pale_bit_2 AT %I*: BOOL;

    // Entradas espeficicas
    //Terminal 6
	Horizontal_descargador_detras AT %I*: BOOL; //ManipuladorDetras
	Horizontal_descargador_delante AT %I*: BOOL; //ManipuladorDelante
	Vertical_descargador_arriba AT %I*: BOOL;
	Vertical_descargador_abajo AT %I*: BOOL;
	Verificador_arriba AT %I*: BOOL;
	Verificador_abajo AT %I*: BOOL;
	Desplazador_detras AT %I*: BOOL;
	Desplazador_delante AT %I*: BOOL;
	Alimentador_detras AT %I*: BOOL;
	
	
	//Terminal 7
	Alimentador_delante AT %I*: BOOL;
	Vacio_obtenido_vacuostato_descargador AT %I*: BOOL;

END_VAR
VAR
	ModoAnterior: E_GEMMA;	

    // Bloques funcionales
	CLK: FB_Clock;
    Director: FB_Director;
    Coordinador: FB_Coordinador_SFC;
	AlimentadorVerificadorDesplazador: FB_AlimentadorVerificadorDesplazador_SFC;
    SituarPale: FB_SituarPale_SFC;
	//ResetDescargador: FB_ResetDescargador_SFC;
    Descargador: FB_Descargador_SFC;
    Rechazador: FB_Rechazador_SFC;
    TransferirPale: FB_TransferirPale_SFC;
	Finalizar: FB_EstacionFinalizar_SFC;
	Preparar: FB_EstacionPreparar_SFC;
    
    // Salidas comunes
    Desconecta_parte_operativa AT %Q*: BOOL;
    Lampara_falta_material AT %Q*: BOOL;
    Lampara_marcha AT %Q*: BOOL; //LamparaMarch
    Lampara_alarma AT %Q*: BOOL; //LamparaAlarma
	AvisadorSonoro AT %Q*: BOOL;


    Activa_marcha_motor_cinta AT %Q*: BOOL; //CintaMotorActiva
    Invierte_marcha_motor_cinta AT %Q*: BOOL;
    Retenedor_pale_baja AT %Q*: BOOL;
    Separador_pale_sube AT %Q*: BOOL;
    
    //Terminal 8
	Descargador_adelante AT %Q*: BOOL;
	Descargador_atras AT %Q*: BOOL;
	Descargador_baja AT %Q*: BOOL;
	Rechazador_adelante AT %Q*: BOOL;
	Verificador_baja AT %Q*: BOOL;
	Desplazador_adelante AT %Q*: BOOL;
	Alimentador_adelante AT %Q*: BOOL;
	Eyector_succiona AT %Q*: BOOL;
	Verificar: INT;
	Rechazar: INT;
	Descargar: INT;
	END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Modo Automático
// Modo Automático
//IF NOT Selector_Modo_Manual THEN
CLK();

	// Bloques Funcionales
	Director(
		CondicionInicial := CondicionInicial,
		CondicionMarcha:= (CiclosSolicitados > 0) AND CondicionInicial,
		Emergencia := Pulsador_parada_emergencia,
		Finalizada := Finalizar.Done,
		FinTarea := (CiclosPendientes = 0),
		FinCiclo := Coordinador.Done,
		Manual := Selector_modo_manual,
		Marcha := Pulsador_marcha,
		ParaCiclo := NOT Pulsador_parada_NC,
		Preparada := Preparar.Done,
		Reinicia := EstadoReinicia
	);

IF (Director.Modo <> E_GEMMA.F4) THEN

	SituarPale( //SituarPale
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
        Ack := NOT Coordinador.SituaPale,
        Execute := Coordinador.SituaPale,
        Tcinta := Tcinta,
        Presencia_pale := Presencia_pale,
       	//Codigo_pale_bit_0 := Codigo_pale_bit_0,
        //Codigo_pale_bit_1 := Codigo_pale_bit_1,
        //Codigo_pale_bit_2 := Codigo_pale_bit_2

	);
	
	AlimentadorVerificadorDesplazador( //Preparar
		
		Ack := (Director.Modo <> E_GEMMA.F2),
		Tcheck := Tcheck,
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
		Execute := (Director.Modo = E_GEMMA.F2),
		Alimentador_delante := Alimentador_delante,
		Alimentador_detras := Alimentador_detras,
		Verificador_arriba := Verificador_arriba ,
		Verificador_abajo := Verificador_abajo,
		Desplazador_delante := Desplazador_delante,
		Desplazador_detras := Desplazador_detras, 
		
	);
	
	ResetDescargador( //Finalizar

		Ack := (Director.Modo <> E_GEMMA.F3),
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
		Execute := (Director.Modo = E_GEMMA.F3),
		Horizontal_descargador_detras := Horizontal_descargador_detras,
		Vertical_descargador_arriba := Vertical_descargador_arriba
	);
	
	Coordinador(
	
		CiclosPendientes := CiclosPendientes,
		CiclosAceptados := CiclosAceptados,
		CiclosSolicitados := CiclosSolicitados,
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
		Ack := TRUE,
        Execute := Pulsador_marcha AND (CiclosSolicitados > 0),
		PaleSituado := SituarPale.Done,
		Verificado := AlimentadorVerificadorDesplazador.Done,
		//DescargadorReseteado := ResetDescargador.Done,
        Rechazado := Rechazador.Done,
		BaseCargada := Descargador.Done,
		PaleTransferido := TransferirPale.Done,
		Base_en_alimentador := Base_en_alimentador,
		//pieza_ok := pieza_ok	
	);
	
	
	
	
	Descargador( //CargarBase
		
		Ack := NOT Coordinador.CargaBase,
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
		Execute := Coordinador.CargaBase,
		Horizontal_descargador_detras := Horizontal_descargador_detras,
		Vertical_descargador_abajo := Vertical_descargador_abajo,
		Vacio_obtenido_vacuostato_descargador := Vacio_obtenido_vacuostato_descargador ,
		Vertical_descargador_arriba := Vertical_descargador_arriba ,
		Horizontal_descargador_delante := Horizontal_descargador_delante ,
	
	);	
		
	Rechazador(
		
		Ack := NOT Coordinador.RechazaBase,
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
        SFCReset := EstadoReinicia,
		Execute := Coordinador.RechazaBase,
		Verificador_abajo := Verificador_abajo
		
	);
	
	TransferirPale(
		SFCPause := NOT EstadoReinicia AND EstadoPausa,
		SFCReset := EstadoReinicia,		
		Ack := NOT Coordinador.TransfierePale,
		Execute := Coordinador.TransfierePale,
		//TpoCintaRetenedor := TpoCintaRetenedor,
		//TpoCintaSeparador := TpoCintaSeparador,
		//TpoPaleSalida := TpoPaleSalida,
		//TpoPaleTransferencia := TpoPaleTransferencia,
		//PalePresencia := PalePresencia
	);
	
//Acciones Comunes
Lampara_alarma := (Director.Modo = E_GEMMA.D1) OR ((Director.Modo = E_GEMMA.A6) AND CLK.Q);
Lampara_marcha := Director.Produccion OR ((Director.Modo = E_GEMMA.A1) AND CLK.Q);
AvisadorSonoro := ((Director.Modo = E_GEMMA.F2) AND CLK.Q) OR (Director.Modo = E_GEMMA.F3);
//Lampara_falta_material := Coordinador.Lampara_falta_material;
Activa_marcha_motor_cinta := NOT EstadoPausa AND (SituarPale.Activa_marcha_motor_cinta OR TransferirPale.Activa_marcha_motor_cinta);

//TranferirPale
 Retenedor_pale_baja := TransferirPale.Retenedor_pale_baja;
 Separador_pale_sube := TransferirPale.Separador_pale_sube;
//AlimentadorVerificadorDesplazador
Alimentador_adelante := AlimentadorVerificadorDesplazador.Alimentador_adelante;
Verificador_baja := AlimentadorVerificadorDesplazador.Verificador_baja;
Desplazador_adelante := AlimentadorVerificadorDesplazador.Desplazador_adelante;
pieza_ok := AlimentadorVerificadorDesplazador.pieza_ok;
//Descargador
Eyector_succiona := Descargador.Eyector_succiona;
Descargador_adelante := Descargador.Descargador_adelante;
Descargador_atras := Descargador.Descargador_atras OR ResetDescargador.Descargador_atras;
Descargador_baja := Descargador.Descargador_baja;
//Rechazador
Rechazador_adelante := Rechazador.Rechazador_adelante;

END_IF

// Parametros de Salida
CondicionInicial := EstacionConectada AND Horizontal_descargador_detras AND Desplazador_detras AND Verificador_arriba AND Vertical_descargador_arriba AND Alimentador_detras;

//al iniciar una tarea
IF ((ModoAnterior = E_GEMMA.A1) AND (Director.Modo <> E_GEMMA.A1) AND (CiclosPendientes = 0)) THEN
    CiclosPendientes := CiclosSolicitados;
END_IF

IF (Director.Modo <> E_GEMMA.F4) THEN
    PaleCodigo := SituarPale.PaleCodigo;
ELSE 
    PaleCodigo.0 := Codigo_pale_bit_0;
    PaleCodigo.1 := Codigo_pale_bit_1;
    PaleCodigo.2 := Codigo_pale_bit_2;
END_IF

// ACTULIZACION DE IMAGENES
ModoAnterior := Director.Modo;
]]></ST>
    </Implementation>
    <LineIds Name="FB_Estacion">
      <LineId Id="544" Count="0" />
      <LineId Id="745" Count="2" />
      <LineId Id="1101" Count="0" />
      <LineId Id="748" Count="1" />
      <LineId Id="953" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="957" Count="8" />
      <LineId Id="767" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="768" Count="1" />
      <LineId Id="771" Count="37" />
      <LineId Id="975" Count="0" />
      <LineId Id="982" Count="14" />
      <LineId Id="978" Count="3" />
      <LineId Id="976" Count="1" />
      <LineId Id="809" Count="26" />
      <LineId Id="1096" Count="0" />
      <LineId Id="838" Count="1" />
      <LineId Id="1083" Count="2" />
      <LineId Id="1097" Count="0" />
      <LineId Id="840" Count="2" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1103" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="843" Count="18" />
      <LineId Id="205" Count="0" />
      <LineId Id="1111" Count="4" />
      <LineId Id="1119" Count="1" />
      <LineId Id="1116" Count="1" />
      <LineId Id="1123" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1125" Count="3" />
      <LineId Id="1124" Count="0" />
      <LineId Id="1130" Count="2" />
      <LineId Id="1129" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>